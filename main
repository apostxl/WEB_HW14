from fastapi import FastAPI, HTTPException
from fastapi_limiter import FastAPILimiter
from fastapi_limiter.depends import RateLimiter
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import random
import string
from typing import Dict

app = FastAPI()

origins = ["http://localhost", "http://localhost:3000"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

limiter = FastAPILimiter()

@app.post("/limited-route")
@limiter.limit("3/minute")  
async def limited_route():
    """Handler for limited-route.
    
    Limits access to the route to 3 requests per minute.
    """
    return {"message": "Limited route accessed"}

@app.get("/verify-email/{verification_code}")
async def verify_email(verification_code: str):
    """Handler for verifying email by verification code.
    
    Args:
        verification_code (str): Verification code to validate email.
        
    Returns:
        dict: Message indicating successful or unsuccessful email verification.
    """
    verification_codes: Dict[str, str] = {}  # Dictionary to store verification codes
    
    # Logic to verify email by code
    return {"message": f"Email verified for code: {verification_code}"}

class EmailVerification(BaseModel):
    email: str

def generate_verification_code():
    """Generate random verification code."""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=6))

@app.post("/send-verification-code/")
async def send_verification_code(email_verification: EmailVerification):
    """Handler for sending verification code to email.
    
    Args:
        email_verification (EmailVerification): Email object containing the email.
        
    Returns:
        dict: Message indicating successful sending of verification code.
    """
    email = email_verification.email
    code = generate_verification_code()
    verification_codes[email] = code

    return {"message": "Verification code sent"}

@app.post("/verify-email/")
async def verify_email(email_verification: EmailVerification, code: str):
    """Handler for verifying email using verification code.
    
    Args:
        email_verification (EmailVerification): Email object containing the email.
        code (str): Verification code to validate email.
        
    Returns:
        dict: Message indicating successful or unsuccessful email verification.
    """
    email = email_verification.email
    if email in verification_codes and verification_codes[email] == code:
        return {"message": "Email verified successfully"}
    else:
        return {"message": "Invalid verification code"}
    return {"message": f"Email verified for code: {verification_code}"}

@app.put("/update-avatar/{user_id}")
async def update_avatar(user_id: int, avatar_url: str):
    """Handler for updating user avatar by user ID.
    
    Args:
        user_id (int): User ID.
        avatar_url (str): New avatar URL.
        
    Returns:
        dict: Message indicating successful update of user avatar.
    """
    return {"message": f"Avatar updated for user ID: {user_id}, new URL: {avatar_url}"}

@app.post("/reset-password")
async def reset_password(email: str):
    """Handler for resetting password by email.
    
    Args:
        email (str): Email address.
        
    Returns:
        dict: Message indicating password reset email sent or error if email not found.
    """
    if email != "test@example.com":
        raise HTTPException(status_code=404, detail="Email not found")
    return {"message": "Password reset email sent"}
